{"version":3,"sources":["components/assets/images/hogwarts2.png","components/assets/images/hat.png","components/assets/images/housescrest.png","components/assets/images/errorpixie.png","components/assets/images/demiguise.png","components/assets/images/g2.png","components/assets/images/s2.png","components/assets/images/r2.png","components/assets/images/h2.png","fonts/HARRYP__.TTF","components/Common/Home.js","components/Common/Navbar.js","components/Common/Error.js","components/Quiz/Quiz.js","lib/api.js","components/Quiz/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","hogwarts","width","alt","to","Navbar","state","isOpen","handleToggle","setState","prevProps","this","props","location","pathname","housescrest","height","onClick","sortinghat","React","Component","withRouter","Error","pixie","Quiz","housesData","result","questions","quizOptions","nextQuestion","event","newQuestions","slice","newOptions","push","target","value","axios","get","res","data","console","log","history","map","house","key","_id","name","join","length","demiguise","Result","finalImage","img","Gryffindor","info","Slytherin","Ravenclaw","Hufflepuff","findWinner","sort","a","b","filter","v","pop","findImage","item","element","winner","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,sHCA3CD,EAAOC,QAAU,IAA0B,sC,iICmB5BC,EAfF,kBACX,6BAASC,UAAU,6CACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,aAAb,wBACA,yBAAKC,IAAKC,IAAUC,MAAM,MAAMC,IAAI,aAClC,uBAAGJ,UAAU,WAAb,oDACF,kBAAC,IAAD,CAAMK,GAAG,QAAQL,UAAU,UAAS,4BAAQA,UAAU,0BAAlB,mB,8DCLtCM,E,4MACJC,MAAQ,CAAEC,QAAS,G,EAEnBC,aAAe,WACb,EAAKC,SAAS,CAAEF,QAAU,EAAKD,MAAMC,U,iEAGpBG,GACbC,KAAKC,MAAMC,SAASC,WAAaJ,EAAUG,SAASC,UACtDH,KAAKF,SAAS,CAAEF,QAAQ,M,+BAIjB,IACDA,EAAWI,KAAKL,MAAhBC,OACR,OACI,yBAAKR,UAAU,kBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMK,GAAG,IAAIL,UAAU,eACrB,yBAAKA,UAAU,SAASC,IAAKe,IAAaC,OAAO,KAAKb,IAAI,gBAC1D,uBAAGJ,UAAU,WAAb,SAEF,0BAAMkB,QAASN,KAAKH,aAAcT,UAAS,wBAAmBQ,EAAS,YAAc,KACjF,+BACA,+BACA,iCAIN,yBAAKR,UAAS,sBAAiBQ,EAAS,YAAc,KACpD,yBAAKR,UAAU,cACf,kBAAC,IAAD,CAAMK,GAAG,QAAQL,UAAU,eACzB,yBAAKA,UAAU,SAASC,IAAKkB,IAAYF,OAAO,KAAKb,IAAI,gBACzD,uBAAGJ,UAAU,WAAb,wB,GAlCKoB,IAAMC,WA4CZC,cAAWhB,G,iBClCXiB,EAbD,kBACZ,6BAASvB,UAAU,6CACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,cACf,yBAAKA,UAAU,QAAQC,IAAKuB,IAAOrB,MAAM,MAAMC,IAAI,iBAEjD,uBAAGJ,UAAU,sCAAb,oD,mECgEOyB,E,4MAlEblB,MAAQ,CACNmB,WAAY,GACZC,OAAQ,GACRC,UAAW,CACT,0CACA,kDACA,sCACA,uCAEFC,YAAa,CAAC,SAAU,SAAU,SAAU,gB,EAa9CC,aAAe,SAAAC,GACb,IAAMC,EAAY,YAAO,EAAKzB,MAAMqB,UAAUK,MAAM,IAC9CC,EAAU,YAAQ,EAAK3B,MAAMsB,YAAYI,MAAM,IAErD,EAAKvB,SAAS,CAAEkB,UAAWI,EAAcH,YAAcK,IAEvD,IAAMP,EAAM,YAAQ,EAAKpB,MAAMoB,QAC/BA,EAAOQ,KAAKJ,EAAMK,OAAOC,OACzB,EAAK3B,SAAS,CAAEiB,Y,2MC/BXW,IAAMC,IAAN,UALO,+BAKP,kBAHG,sE,ODkBAC,E,OACN5B,KAAKF,SAAS,CAAEgB,WAAac,EAAIC,O,gDAEjCC,QAAQC,IAAR,MACA/B,KAAKC,MAAM+B,QAAQT,KAAK,a,8IAgBlB,IAAD,OACP,OACE,yBAAKnC,UAAU,QACb,uBAAGA,UAAU,aAAaY,KAAKL,MAAMqB,UAAU,IAC/C,yBAAK5B,UAAU,WAKfY,KAAKL,MAAMmB,WAAWmB,KAAI,SAACC,GACzB,MAAgD,kBAArCA,EAAM,EAAKvC,MAAMsB,YAAY,IAC/B,4BAAQkB,IAAKD,EAAME,IAAK9B,QAAS,EAAKY,aAAcO,MAAOS,EAAMG,MAAOH,EAAM,EAAKvC,MAAMsB,YAAY,KACvD,kBAArCiB,EAAM,EAAKvC,MAAMsB,YAAY,IACtC,4BAAQkB,IAAKD,EAAME,IAAK9B,QAAS,EAAKY,aAAcO,MAAOS,EAAMG,MAAOH,EAAM,EAAKvC,MAAMsB,YAAY,IAAIqB,KAAK,YADhH,MAOsB,IAA7BtC,KAAKL,MAAMoB,OAAOwB,QAAgB,kBAAC,IAAD,CAAM9C,GAAI,CAC5CU,SAAU,UACRR,MAAO,CACLoB,OAAQf,KAAKL,MAAMoB,SAEpB3B,UAAU,UACb,4BAAQA,UAAU,aAAlB,kBANkC,IAMoB,yBAAKA,UAAU,YAAYC,IAAKmD,IAAWjD,MAAM,MAAMC,IAAI,uB,GA5DxGgB,IAAMC,W,oEE2CVgC,E,4MAzCb9C,MAAS,CACP+C,WAAY,CACV,CAACL,KAAM,aAAcM,IAAKC,IAAYC,KAAM,0HAC5C,CAACR,KAAM,YAAaM,IAAKG,IAAWD,KAAM,8HAC1C,CAACR,KAAM,YAAaM,IAAKI,IAAWF,KAAM,6HAC1C,CAACR,KAAM,aAAcM,IAAKK,IAAYH,KAAM,yH,EAIhDI,WAAa,SAAClC,GAEV,OAAOA,EAAOmC,MAAK,SAACC,EAAEC,GAAH,OACbrC,EAAOsC,QAAO,SAAAC,GAAC,OAAIA,IAAIH,KAAGZ,OAC1BxB,EAAOsC,QAAO,SAAAC,GAAC,OAAIA,IAAIF,KAAGb,UAC9BgB,O,EAINC,UAAY,SAACC,GACX,OAAO,EAAK9D,MAAM+C,WAAWW,QAAO,SAAAK,GAClC,GAAGA,EAAQrB,OAASoB,EAClB,OAAOC,M,uDAMX,IAAMC,EAAS3D,KAAKiD,WAAWjD,KAAKC,MAAMC,SAASP,MAAMoB,QAEnD4B,EAAM3C,KAAKwD,UAAUG,GAC3B,OACE,yBAAKvE,UAAU,UACb,uBAAGA,UAAU,iBAAiBuE,GAC9B,yBAAKtE,IAAG,UAAKsD,EAAI,GAAGA,KAAOpD,MAAM,MAAMC,IAAG,UAAKmE,KAC/C,uBAAGvE,UAAU,aAAb,UAA6BuD,EAAI,GAAGE,Y,GApCvBrC,IAAMC,WCuBZmD,MAff,WACE,OACE,kBAAC,IAAD,KACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5E,IACjC,kBAAC,IAAD,CAAO2E,KAAK,QAAQC,UAAWlD,IAC/B,kBAAC,IAAD,CAAOiD,KAAK,UAAUC,UAAWtB,IACjC,kBAAC,IAAD,CAAOqB,KAAK,KAAKC,UAAWpD,OCXdqD,QACW,cAA7BC,OAAO/D,SAASgE,UAEe,UAA7BD,OAAO/D,SAASgE,UAEhBD,OAAO/D,SAASgE,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.26035407.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hogwarts2.149f4998.png\";","module.exports = __webpack_public_path__ + \"static/media/hat.f7acbc5a.png\";","module.exports = __webpack_public_path__ + \"static/media/housescrest.c71cb81f.png\";","module.exports = __webpack_public_path__ + \"static/media/errorpixie.af3e9ef5.png\";","module.exports = __webpack_public_path__ + \"static/media/demiguise.a94c5452.png\";","module.exports = __webpack_public_path__ + \"static/media/g2.17cfdbfa.png\";","module.exports = __webpack_public_path__ + \"static/media/s2.e5bdac06.png\";","module.exports = __webpack_public_path__ + \"static/media/r2.039b15c9.png\";","module.exports = __webpack_public_path__ + \"static/media/h2.569d46c4.png\";","module.exports = __webpack_public_path__ + \"static/media/HARRYP__.181ef9a7.TTF\";","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport hogwarts from '../assets/images/hogwarts2.png'\n\nconst Home = () => (\n  <section className=\"hero is-fullheight-with-navbar is-warning\">\n    <div className=\"hero-body\">\n      <div className=\"container\">\n        <p className=\"hometitle\">Welcome To Hogwarts!</p>\n        <img src={hogwarts} width=\"600\" alt='hogwarts'/>\n          <p className=\"homemsg\">Sort Yourself Into a House with the Sorting Hat!</p>\n        <Link to='/quiz' className='Button'><button className=\"startquizbutton button\">Start Quiz</button></Link>\n      </div>\n    </div>\n  </section>\n)\n    \n  \n\nexport default Home","import React from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport sortinghat from '../assets/images/hat.png'\nimport housescrest from '../assets/images/housescrest.png'\n\n\nclass Navbar extends React.Component {\n  state = { isOpen : false }\n  \n  handleToggle = () => {\n    this.setState({ isOpen : !this.state.isOpen })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({ isOpen: false })\n    }\n  }\n\n  render () {\n    const { isOpen } = this.state\n    return (\n        <nav className=\"navbar is-dark\">\n          <div className=\"container\">\n            <div className=\"navbar-brand\">\n              <Link to=\"/\" className=\"navbar-item\">\n                <img className=\"navimg\" src={housescrest} height=\"60\" alt='sorting hat'/>\n                <p className=\"navtext\">Home</p>\n              </Link>\n              <span onClick={this.handleToggle} className={`navbar-burger ${isOpen ? 'is-active' : ''}`}>\n                  <span></span>\n                  <span></span>\n                  <span></span>\n              </span>\n            </div>\n\n            <div className={`navbar-menu ${isOpen ? 'is-active' : ''}`}>\n              <div className=\"navbar-end\">\n              <Link to=\"/quiz\" className=\"navbar-item\">\n                <img className=\"navimg\" src={sortinghat} height=\"60\" alt='sorting hat'/>\n                <p className=\"navtext\">Sorting Hat</p>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </nav>\n    )\n  }\n}\n\nexport default withRouter(Navbar)","import React from 'react'\nimport pixie from '../assets/images/errorpixie.png'\n\nconst Error = () => (\n  <section className=\"hero is-fullheight-with-navbar is-warning\">\n    <div className=\"hero-body\">\n      <div className=\"container\">\n      <div className=\"errorpixie\">\n      <img className=\"pixie\" src={pixie} width=\"400\" alt='error pixie'/>\n      </div>\n        <p className=\"error title is-1 has-text-centered\">Oops something went wrong. Please try again!</p>\n      </div>\n    </div>\n  </section>\n)\n\nexport default Error","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { getAllData } from '../../lib/api'\nimport demiguise from '../assets/images/demiguise.png'\n\n\n\nclass Quiz extends React.Component {\n  state = {\n    housesData :[],\n    result: [],\n    questions: [\n      'Which animal do you most identify with?', \n      'Which colour combination are you most drawn to?', \n      'Which values do you most relate to?', \n      'Which professor do you most admire?'\n    ],\n    quizOptions: ['mascot', 'colors', 'values', 'headOfHouse']\n  }\n\n  async componentDidMount() {\n    try {\n      const res = await getAllData()\n      this.setState({ housesData : res.data })\n    } catch (err) {\n      console.log(err)\n      this.props.history.push('/notfound')\n    }\n  }\n\n  nextQuestion = event => { // * attached to the answer buttons, also updates score when these are clicked.\n    const newQuestions = [...this.state.questions.slice(1)] // * make a new \n    const newOptions = [ ...this.state.quizOptions.slice(1) ]\n    //array cutting off the old first questions\n    this.setState({ questions: newQuestions, quizOptions : newOptions}) // * set that new array into state\n\n    const result = [ ...this.state.result ]\n    result.push(event.target.value)\n    this.setState({ result })\n  }\n\n\n  render() {\n    return (\n      <div className=\"quiz\">\n        <p className='questions'>{this.state.questions[0]}</p> \n        <div className='options'>\n          {/* if typeof === '' then map like this\n          else map like array */}\n          \n        {\n        this.state.housesData.map((house) =>  {\n          if (typeof house[this.state.quizOptions[0]] === 'string') {\n            return <button key={house._id} onClick={this.nextQuestion} value={house.name}>{house[this.state.quizOptions[0]]}</button>\n          } else if (typeof house[this.state.quizOptions[0]] === 'object') {\n            return <button key={house._id} onClick={this.nextQuestion} value={house.name}>{house[this.state.quizOptions[0]].join(', ')}</button>\n          }\n        })\n      }\n        </div>\n            \n        { this.state.result.length === 4 && <Link to={{\n          pathname: '/result',\n            state: {\n              result: this.state.result\n            }\n          }} className=\"Result\">\n          <button className=\"seeresult\">See the Result</button> <img className=\"demiguise\" src={demiguise} width=\"200\" alt='result pixie'/>\n            </Link> }\n      </div>\n    )\n  }\n}\n\nexport default Quiz\n\n\n","import axios from 'axios'\n\nconst baseUrl = 'https://www.potterapi.com/v1'\n// const apiKey = `?key=$2a$10$t6cqE4.0tqBOAAkoYBb3G${process.env.REACT_APP_HARRY_POTTER_KEY}`\nconst apiKey = `?key=$2a$10$t6cqE4.0tqBOAAkoYBb3G.ZZ8B8aJ55eOn5wTyv.mfkWgHT7xJ75y`\nexport const getAllData = () => {\n  // console.log(apiKey)\n  return axios.get(`${baseUrl}/houses${apiKey}`)\n}\n\n\n\n\n\n","import React from 'react'\nimport Gryffindor from '../assets/images/g2.png'\nimport Slytherin from '../assets/images/s2.png'\nimport Ravenclaw from '../assets/images/r2.png'\nimport Hufflepuff from '../assets/images/h2.png'\n\n\nclass Result extends React.Component {\n\n  state =  {\n    finalImage: [\n      {name: \"Gryffindor\", img: Gryffindor, info: \"You belong in Gryffindor,\\nWhere dwell the brave at heart,\\nTheir daring, nerve, and chivalry\\n Set Gryffindors apart.\"},\n      {name: \"Slytherin\", img: Slytherin, info: \"You belong in Slytherin,\\n There you'll make your real friends,\\nThose cunning folks use any means\\nTo achieve their ends.\"},\n      {name: \"Ravenclaw\", img: Ravenclaw, info: \"You belong in wise old Ravenclaw,\\nif you've a ready mind,\\nWhere those of wit and learning,\\nWill always find their kind\"},\n      {name: \"Hufflepuff\", img: Hufflepuff, info: \"You belong in Hufflepuff,\\nWhere they are just and loyal,\\nThose patient Hufflepuffs are true\\nAnd unafraid of toil\"}\n    ]\n  }\n\n  findWinner = (result) => {\n    // console.log(result) \n      return result.sort((a,b) =>\n            result.filter(v => v===a).length\n          - result.filter(v => v===b).length\n      ).pop()\n  }\n\n  //* if image name is equal to item then return that image\n  findImage = (item) => {\n    return this.state.finalImage.filter(element => {\n      if(element.name === item) {\n        return element\n      }\n    })\n  }\n\n  render() {\n    const winner = this.findWinner(this.props.location.state.result)\n    // console.log(winner) \n    const img = this.findImage(winner) //* matching image name to to winner\n    return (\n      <div className=\"result\">\n        <p className=\"resultmessage\">{winner}</p>\n        <img src={`${img[0].img}`} width=\"200\" alt={`${winner}`} />\n        <p className=\"houseinfo\">{`${img[0].info}`}</p>\n      </div>\n    )\n  }\n\n}\n\nexport default Result\n\n\n// if winner === Gryffindor return ../assets/images/Gryffindor.png \n// else if winner ===   ","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n// import { getAllData } from '../../lib/api'\n\nimport './App.css'\n\nimport Home from './components/Common/Home'\nimport Navbar from './components/Common/Navbar'\nimport Error from './components/Common/Error'\n\nimport Quiz from './components/Quiz/Quiz'\nimport Result from './components/Quiz/Result'\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Navbar />\n    <Switch>\n      <Route exact path=\"/\" component={Home}/>\n      <Route path=\"/quiz\" component={Quiz}/>\n      <Route path=\"/result\" component={Result}/>\n      <Route path='/*' component={Error} />\n    </Switch>\n    </BrowserRouter>\n  )\n}\n\n\nexport default App ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/main.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/HARRYP__.TTF'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}